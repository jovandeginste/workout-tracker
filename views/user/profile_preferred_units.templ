package user

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
)

templ profilePreferredUnits() {
	{{ pu := helpers.CurrentUser(ctx).PreferredUnits() }}
	<form
		method="post"
		action={ templ.SafeURL(helpers.RouteFor(ctx, "user-profile-preferred-units-update")) }
	>
		<table class="table-fixed">
			<tbody>
				<tr>
					<th>
						<label for="speed">
							@helpers.IconFor("speed")
							{ i18n.T(ctx, "translation.Speed") }
						</label>
					</th>
					<td>
						<select class="input-ellipsis" id="speed" name="speed">
							<option value="kph" selected?={ pu.Speed() == "kph" }>
								{ i18n.T(ctx, "units.kilometers_per_hour") }
							</option>
							<option value="mph" selected?={ pu.Speed() == "mph" }>
								{ i18n.T(ctx, "units.miles_per_hour") }
							</option>
						</select>
					</td>
				</tr>
				<tr>
					<th>
						<label for="distance">
							@helpers.IconFor("distance")
							{ i18n.T(ctx, "translation.Distance") }
						</label>
					</th>
					<td>
						<select class="input-ellipsis" id="distance" name="distance">
							<option value="km" selected?={ pu.Distance() == "km" }>
								{ i18n.T(ctx, "units.kilometers") }
							</option>
							<option value="mi" selected?={ pu.Distance() == "mi" }>
								{ i18n.T(ctx, "units.miles") }
							</option>
						</select>
					</td>
				</tr>
				<tr>
					<th>
						<label for="elevation">
							@helpers.IconFor("elevation")
							{ i18n.T(ctx, "translation.Elevation") }
						</label>
					</th>
					<td>
						<select class="input-ellipsis" id="elevation" name="elevation">
							<option value="m" selected?={ pu.Elevation() == "m" }>
								{ i18n.T(ctx, "units.meters") }
							</option>
							<option value="ft" selected?={ pu.Elevation() == "ft" }>
								{ i18n.T(ctx, "units.feet") }
							</option>
						</select>
					</td>
				</tr>
				<tr>
					<th>
						<label for="weight">
							@helpers.IconFor("weight")
							{ i18n.T(ctx, "translation.Weight") }
						</label>
					</th>
					<td>
						<select class="input-ellipsis" id="weight" name="weight">
							<option value="lbs" selected?={ pu.Weight() == "lbs" }>
								{ i18n.T(ctx, "units.pounds") }
							</option>
							<option value="kg" selected?={ pu.Weight() == "kg" }>
								{ i18n.T(ctx, "units.kilograms") }
							</option>
						</select>
					</td>
				</tr>
				<tr>
					<th>
						<label for="height">
							@helpers.IconFor("height")
							{ i18n.T(ctx, "translation.Height") }
						</label>
					</th>
					<td>
						<select class="input-ellipsis" id="height" name="height">
							<option value="in" selected?={ pu.Height() == "in" }>
								{ i18n.T(ctx, "units.inch") }
							</option>
							<option value="cm" selected?={ pu.Height() == "cm" }>
								{ i18n.T(ctx, "units.centimeter") }
							</option>
						</select>
					</td>
				</tr>
				<tr>
					<td></td>
					<td>
						<button id="update-preferred-units" class="button" type="submit">{ i18n.T(ctx, "user.profile.update_preferred_units") }</button>
					</td>
				</tr>
			</tbody>
		</table>
	</form>
}

templ profileTotalsShow(uwt *database.WorkoutType) {
	<select class="input-ellipsis" id="totals_show" name="totals_show">
		<option value="auto">{ i18n.T(ctx, "translation.Autodetect") }</option>
		for _, wt := range helpers.WorkoutTypes() {
			if wt.IsDistance() {
				<option value={ wt.String() } selected?={ wt.String() == uwt.String() }>
					{ i18n.T(ctx, wt.StringT()) }
				</option>
			}
		}
	</select>
}

templ profileTimezone(utz string) {
	<select class="input-ellipsis" id="timezone" name="timezone">
		<option></option>
		for _, tz := range helpers.Timezones() {
			<option value={ tz.Name } selected?={ tz.Name == utz }>
				{ tz.Description }
			</option>
		}
	</select>
}

templ profileLanguage(ulang string) {
	<select class="input-ellipsis" id="language" name="language">
		<option value="browser" selected?={ ulang == "browser" }>
			üåê Browser language
		</option>
		for _, sl := range helpers.SupportedLanguages() {
			{{ linf := helpers.ToLanguageInformation(sl) }}
			<option value={ linf.Code } selected?={ linf.Code == ulang }>
				{ linf.Flag } { linf.LocalName }
				if linf.EnglishName != "" {
					if linf.EnglishName != linf.LocalName {
						({ linf.EnglishName })
					}
				}
			</option>
		}
	</select>
}
