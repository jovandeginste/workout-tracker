package user

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
	"github.com/jovandeginste/workout-tracker/v2/views/partials"
)

templ Profile(u *database.User) {
	@partials.Page(partials.NewPageOptions()) {
		<div class="inner-form">
			<h3>
				@helpers.IconFor("user-profile")
				{ i18n.T(ctx, "user.profile.your_settings") }
			</h3>
			@userSettings(u)
		</div>
		<div class="inner-form">
			<h3>
				@helpers.IconFor("units")
				{ i18n.T(ctx, "user.profile.preferred_units") }
			</h3>
			@profilePreferredUnits()
		</div>
		<div class="inner-form">
			<h3>
				@helpers.IconFor("actions")
				{ i18n.T(ctx, "translation.Actions") }
			</h3>
			@userActions()
		</div>
	}
}

templ userActions() {
	<form method="post" action={ templ.SafeURL(helpers.RouteFor(ctx, "user-refresh")) }>
		<label for="refresh">{ i18n.T(ctx, "user.profile.refresh_all_your_workouts") }</label>
		<button id="refresh" class="button" type="submit">
			<a>
				@helpers.IconFor("refresh")
			</a>
		</button>
	</form>
}

templ userSettings(u *database.User) {
	<form method="post" action={ templ.SafeURL(helpers.RouteFor(ctx, "user-profile-update")) }>
		<table class="table-fixed">
			<tbody>
				<tr>
					<th class="w-1/2 xl:w-1/3 2xl:w-1/4">
						<label for="api_active">
							{ i18n.T(ctx, "user.profile.enable_api_access") }
							<a
								title={ i18n.T(ctx, "translation.how_to_use") }
								target="_blank"
								href="https://github.com/jovandeginste/workout-tracker?tab=readme-ov-file#api-usage"
							>
								@helpers.IconFor("info")
							</a>
						</label>
					</th>
					<td class="flex flex-wrap gap-5">
						<input
							type="checkbox"
							id="api_active"
							name="api_active"
							value="true"
							checked?={ u.Profile.APIActive }
						/>
						if u.Profile.APIActive {
							<input
								class="input-ellipsis"
								type="password"
								id="api_key"
								size="40"
								value={ u.APIKey }
								readonly
							/>
							<span>
								<form
									class="flex flex-wrap items-center"
									method="post"
									action={ templ.SafeURL(helpers.RouteFor(ctx, "user-profile-reset-api-key")) }
								>
									<button
										type="button"
										class="button edit"
										title={ i18n.T(ctx, "user.profile.show_hide") }
										onclick="toggleTextPassword(this, 'api_key');"
									>
										@helpers.IconFor("show")
									</button>
									<button
										type="button"
										class="button"
										title={ i18n.T(ctx, "user.profile.copy_to_clipboard") }
										onclick="copyToClipboard('api_key');"
									>
										@helpers.IconFor("copy")
									</button>
									<button
										class="button dangerous"
										title={ i18n.T(ctx, "user.profile.generate_a_new_api_key") }
									>
										@helpers.IconFor("refresh")
									</button>
								</form>
							</span>
						}
					</td>
				</tr>
				<tr>
					<th>
						<label for="totals_show">
							{ i18n.T(ctx, "user.profile.totals_to_show_on_dashboard") }
						</label>
					</th>
					<td>
						@profileTotalsShow(&u.Profile.TotalsShow)
					</td>
				</tr>
				<tr>
					<th>
						<label for="timezone">{ i18n.T(ctx, "user.profile.time_zone") }</label>
					</th>
					<td>
						@profileTimezone(u.Profile.Timezone)
					</td>
				</tr>
				<tr>
					<th>
						<label for="language">
							{ i18n.T(ctx, "user.profile.Language") }
							<a
								href="https://hosted.weblate.org/projects/workout-tracker/"
								target="_blank"
								title={ i18n.T(ctx, "translation.Please_help_translate_via_Weblate") }
							>
								@helpers.IconFor("translate")
							</a>
						</label>
					</th>
					<td>
						@profileLanguage(u.Profile.Language)
					</td>
				</tr>
				<tr>
					<th>
						<label for="theme">{ i18n.T(ctx, "user.profile.Theme") }</label>
					</th>
					<td>
						<select class="input-ellipsis" id="theme" name="theme">
							<option value="light" selected?={ u.Profile.Theme == "light" }>
								{ i18n.T(ctx, "user.profile.Light") }
							</option>
							<option value="dark" selected?={ u.Profile.Theme == "dark" }>
								{ i18n.T(ctx, "user.profile.Dark") }
							</option>
							<option value="browser" selected?={ u.Profile.Theme == "browser" }>
								{ i18n.T(ctx, "user.profile.Browser_System") }
							</option>
						</select>
					</td>
				</tr>
				<tr>
					<th>
						<label for="auto_import_directory">
							{ i18n.T(ctx, "user.profile.auto_import_directory") }
						</label>
					</th>
					<td>
						<input
							class="input-ellipsis"
							type="text"
							id="auto_import_directory"
							name="auto_import_directory"
							size="40"
							value={ u.Profile.AutoImportDirectory }
							placeholder={ "/imports/" + u.Username + "/" }
						/>
					</td>
				</tr>
				<tr>
					<th>
						<label for="prefer_full_date">
							{ i18n.T(ctx, "user.profile.show_full_date_by_default") }
						</label>
					</th>
					<td>
						<input
							type="checkbox"
							id="prefer_full_date"
							name="prefer_full_date"
							value="true"
							checked?={ u.Profile.PreferFullDate }
						/>
					</td>
				</tr>
				<tr>
					<th>
						<label for="socials_disabled">
							{ i18n.T(ctx, "user.profile.disable_social_sharing_buttons") }
						</label>
					</th>
					<td>
						<input
							type="checkbox"
							id="socials_disabled"
							name="socials_disabled"
							value="true"
							checked?={ u.Profile.SocialsDisabled }
						/>
					</td>
				</tr>
				<tr>
					<td></td>
					<td>
						<button id="update-profile" class="button" type="submit">{ i18n.T(ctx, "user.profile.update_profile") }</button>
					</td>
				</tr>
			</tbody>
		</table>
	</form>
}
