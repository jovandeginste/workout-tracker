package user

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
	"github.com/jovandeginste/workout-tracker/v2/views/partials"
)

templ Statistics(u *database.User, since, per string) {
	@partials.Page(partials.NewPageOptions().WithCharts()) {
		<h2>
			@helpers.IconFor("statistics")
			{ i18n.T(ctx, "translation.Your_progress_per_s_for_the_past_s", i18n.T(ctx, per), i18n.T(ctx, since)) }
		</h2>
		<div class="content">
			<form class="inner-form">
				<label for="since">{ i18n.T(ctx, "translation.Since") }</label>
				<select id="since" name="since">
					for _, o := range helpers.StatisticSinceOptions() {
						<option value={ o } selected?={ o == since }>{ i18n.T(ctx, o) }</option>
					}
				</select>
				<label for="per">{ i18n.T(ctx, "translation.Per") }</label>
				<select id="per" name="per">
					for _, o := range helpers.StatisticPerOptions() {
						<option value={ o } selected?={ o == per }>{ i18n.T(ctx, o) }</option>
					}
				</select>
				<button type="submit" value="Submit">{ i18n.T(ctx, "translation.refresh") }</button>
			</form>
			<div class="lg:flex lg:flex-wrap [&>*]:lg:basis-1/2 [&>*]:2xl:basis-1/3">
				<div>
					<div class="inner-form">
						<h3>
							@helpers.IconFor("workout")
							{ i18n.T(ctx, "menu.Workouts") }
						</h3>
						<div id="workouts-per-time"></div>
					</div>
				</div>
				<div>
					<div class="inner-form">
						<h3>
							@helpers.IconFor("duration")
							{ i18n.T(ctx, "translation.Duration") }
						</h3>
						<div id="duration-per-time"></div>
					</div>
				</div>
				<div>
					<div class="inner-form">
						<h3>
							@helpers.IconFor("distance")
							{ i18n.T(ctx, "translation.Distance") }
						</h3>
						<div id="distance-per-time"></div>
					</div>
				</div>
				<div>
					<div class="inner-form">
						<h3>
							@helpers.IconFor("speed")
							{ i18n.T(ctx, "translation.Average_speed") }
						</h3>
						<div id="average-speed-per-time"></div>
					</div>
				</div>
				<div>
					<div class="inner-form">
						<h3>
							@helpers.IconFor("speed")
							{ i18n.T(ctx, "translation.Average_speed_no_pause") }
						</h3>
						<div id="average-speed-no-pause-per-time"></div>
					</div>
				</div>
				<div>
					<div class="inner-form">
						<h3>
							@helpers.IconFor("max-speed")
							{ i18n.T(ctx, "translation.Max_speed") }
						</h3>
						<div id="max-speed-per-time"></div>
					</div>
				</div>
			</div>
		</div>
		{{ currentUser := helpers.CurrentUser(ctx) }}
		{{ stats, err := currentUser.GetStatisticsFor(since, per) }}
		if err != nil {
			<pre>{ err.Error() }</pre>
		}
		@templ.JSONScript("stats", stats)
		@templ.JSONScript("preferred-units", helpers.PreferredUnitsToJSON(currentUser.PreferredUnits()))
		<script>
      var stats = JSON.parse(document.getElementById('stats').textContent)
      var preferredUnits = JSON.parse(document.getElementById('preferred-units').textContent)

      var theme = 'light';
      if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        theme = 'dark';
      }

      var options = {
        theme: { mode: theme },
        chart: {
          width: "99%",
          animations: { enabled: false },
          toolbar: { show: false },
          type: "bar",
        },
        dataLabels: { enabled: false },
        legend: { position: 'top' },
        tooltip: {
          x: { format: 'MMM \'yy', },
        },
        xaxis: { type: "datetime", },
      }

      new ApexCharts(document.querySelector("#workouts-per-time"), {
        ...options,
        series: Object.entries(stats.buckets).map(entry => {
          const [key, value] = entry;
          return {
            name: value.localWorkoutType,
            data: Object.values(value.buckets).map(e => ({ x: e.bucket, y: e.workouts })),
          };
        }).filter(e => e.data.length > 0),
      }).render();

      new ApexCharts(document.querySelector("#duration-per-time"), {
        ...options,
        tooltip: {
          x: { format: 'MMM \'yy', },
          y: [
            { formatter: function (val, opts) { return formatDuration(val); } },
          ],
        },
        yaxis: [
          { labels: { formatter: (val) => { return formatDuration(val); } } },
        ],
        series: Object.entries(stats.buckets).map(entry => {
          const [key, value] = entry;
          return {
            name: value.localWorkoutType,
            data: Object.values(value.buckets)
            .filter(e => e.duration > 0)
            .map(e => ({ x: e.bucket, y: e.durationSeconds })),
          };
        }).filter(e => e.data.length > 0),
      }).render();

      new ApexCharts(document.querySelector("#distance-per-time"), {
        ...options,
        tooltip: {
          x: { format: 'MMM \'yy', },
          y: [
            { formatter: function (val, opts) { return val + " " + preferredUnits.distance; } },
          ],
        },
        yaxis: [
          { labels: { formatter: (val) => { return val + " " + preferredUnits.distance; } } },
        ],
        series: Object.entries(stats.buckets).map(entry => {
          const [key, value] = entry;
          return {
            name: value.localWorkoutType,
            data: Object.values(value.buckets)
            .filter(e => e.distance > 0)
            .map(e => ({ x: e.bucket, y: e.localDistance })),
          };
        }).filter(e => e.data.length > 0),
      }).render();

      new ApexCharts(document.querySelector("#average-speed-per-time"), {
        ...options,
        tooltip: {
          x: { format: 'MMM \'yy', },
          y: [
            { formatter: function (val, opts) { return val + " " + preferredUnits.speed; } },
          ],
        },
        yaxis: [
          { labels: { formatter: (val) => { return val + " " + preferredUnits.speed; } } },
        ],
        series: Object.entries(stats.buckets).map(entry => {
          const [key, value] = entry;
          return {
            name: value.localWorkoutType,
            data: Object.values(value.buckets)
            .filter(e => e.distance > 0)
            .map(e => ({ x: e.bucket, y: e.localAverageSpeed })),
          };
        }).filter(e => e.data.length > 0),
      }).render();

      new ApexCharts(document.querySelector("#average-speed-no-pause-per-time"), {
        ...options,
        tooltip: {
          x: { format: 'MMM \'yy', },
          y: [
            { formatter: function (val, opts) { return val + " " + preferredUnits.speed; } },
          ],
        },
        yaxis: [
          { labels: { formatter: (val) => { return val + " " + preferredUnits.speed; } } },
        ],
        series: Object.entries(stats.buckets).map(entry => {
          const [key, value] = entry;
          return {
            name: value.localWorkoutType,
            data: Object.values(value.buckets)
            .filter(e => e.distance > 0)
            .map(e => ({ x: e.bucket, y: e.localAverageSpeedNoPause })),
          };
        }).filter(e => e.data.length > 0),
      }).render();

      new ApexCharts(document.querySelector("#max-speed-per-time"), {
        ...options,
        tooltip: {
          x: { format: 'MMM \'yy', },
          y: [
            { formatter: function (val, opts) { return val + " " + preferredUnits.speed; } },
          ],
        },
        yaxis: [
          { labels: { formatter: (val) => { return val + " " + preferredUnits.speed; } } },
        ],
        series: Object.entries(stats.buckets).map(entry => {
          const [key, value] = entry;
          return {
            name: value.localWorkoutType,
            data: Object.values(value.buckets)
            .filter(e => e.distance > 0)
            .map(e => ({ x: e.bucket, y: e.localMaxSpeed })),
          };
        }).filter(e => e.data.length > 0),
      }).render();
    </script>
	}
}
