package workouts

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/pkg/templatehelpers"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
	"github.com/jovandeginste/workout-tracker/v2/views/partials"
)

templ Show(w *database.Workout) {
	@partials.Page(
		partials.NewPageOptions().
			WithSharing(),
	) {
		{{ currentUser := helpers.CurrentUser(ctx) }}
		@DataJson(w)
		<div class="gap-4">
			if w.User.ID == currentUser.ID {
				<span class="float-right actions">
					if w.Dirty {
						<span class="dirty">
							@helpers.IconFor("refresh")
							{ i18n.T(ctx, "translation.refresh_in_progress") }
						</span>
					}
					@Actions(w)
				</span>
			}
			<h2>
				@helpers.IconFor(w.Type.String())
				@Name(w, 0)
				if w.HasCustomType() {
					<i>({ w.CustomType })</i>
				}
			</h2>
		</div>
		<div class="lg:flex lg:flex-wrap print:block">
			if w.HasTracks() {
				<div id="map-container" class="basis-1/2 pagebreak">
					<div class="inner-form">
						@Map(w)
					</div>
				</div>
			}
			<div class="basis-1/2">
				<div class="inner-form">
					@FullWorkoutDetails(w)
				</div>
			</div>
		</div>
		if len(w.RouteSegmentMatches) > 0 {
			<div class="pagebreak">
				<div class="basis-1/2 2xl:basis-1/3 inner-form">
					<h3>
						@helpers.IconFor("route-segment")
						{ i18n.T(ctx, "translation.Matching_route_segments") }
					</h3>
					<div class="print:w-full overflow-y-auto">
						@RouteSegments(w.RouteSegmentMatches)
					</div>
				</div>
			</div>
		}
		<div class="pagebreak">
			if len(w.Notes) > 0 {
				<div class="inner-form">
					<h3>
						@helpers.IconFor("note")
						{ i18n.T(ctx, "translation.Notes") }
					</h3>
					<div>
						@templ.Raw(helpers.MarkdownToHTML(w.Notes))
					</div>
				</div>
			}
		</div>
		if w.Details() != nil {
			<div class="inner-form print:hidden">
				@ShowStats(w)
			</div>
		}
		<div>
			if w.Type.IsDistance() && w.Type.IsDuration() && w.Details() != nil {
				<div class="inner-form">
					<div class="print:w-full overflow-y-auto">
						<script src={ helpers.RouteFor(ctx, "assets") + "/views/workouts/breakdown.js" } type="module"></script>
						<workout-breakdown
							map-id="workout-map"
							chart-id="workout-stats"
							data-el="workout-data"
							preferred-units-el="workout-preferred-units"
						></workout-breakdown>
					</div>
				</div>
				@ShowClimbs(w)
			}
		</div>
	}
}

templ ShowClimbs(w *database.Workout) {
	{{ pu := helpers.CurrentUser(ctx).PreferredUnits() }}
	<div class="inner-form">
		<div class="print:w-full overflow-y-auto">
			<table>
				<thead>
					<tr class="climb-header">
						<th></th>
						<th>{ i18n.T(ctx, "climb.start") }</th>
						<th>{ i18n.T(ctx, "climb.distance") }</th>
						<th>
							{ i18n.T(ctx, "climb.elevation_gain_loss") }
						</th>
						<th>{ i18n.T(ctx, "climb.average_slope") }</th>
						<th>{ i18n.T(ctx, "climb.category") }</th>
					</tr>
				</thead>
				<tbody>
					for _, climb := range w.Data.Climbs {
						<tr>
							<td>
								if climb.Type == "climb" {
									<span class="text-green-500"><span class="icon-decoration icon-[fa6-solid--arrow-up-long]"></span></span>
								} else {
									<span class="text-orange-600"><span class="icon-decoration icon-[fa6-solid--arrow-down-long]"></span></span>
								}
								{ i18n.T(ctx, "climb.type_"+climb.Type, climb.Index) }
							</td>
							<td>{ helpers.HumanDistance(ctx, climb.StartDistance) } { pu.Distance() }</td>
							<td>{ helpers.HumanDistance(ctx, climb.Length) } { pu.Distance() }</td>
							<td>{ helpers.HumanElevation(ctx, climb.Elevation) } { pu.Elevation() }</td>
							<td>{ templatehelpers.RoundFloat64(climb.AvgSlope) }%</td>
							<td>{ climb.Category }</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}
