package workouts

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
)

type item struct {
	Item  database.BreakdownItem
	Label string
}

templ ShowStats(stats database.WorkoutBreakdown) {
	<div id="chart"></div>
	{{ pu := helpers.CurrentUser(ctx).PreferredUnits() }}
	{{
data := []item{}
for _, i := range stats.Items {
	i.Localize(pu)

	data = append(data, item{
		Item:  i,
		Label: PointTitle(ctx, pu, i.FirstPoint),
	})
}

translations := map[string]string{
	"distance":     i18n.T(ctx, "translation.Distance"),
	"duration":     i18n.T(ctx, "translation.Duration"),
	"calories":     i18n.T(ctx, "translation.Calories"),
	"heartrate":    i18n.T(ctx, "translation.Heart_rate"),
	"speed":        i18n.T(ctx, "translation.Speed"),
	"elevation":    i18n.T(ctx, "translation.Elevation"),
	"cadence":      i18n.T(ctx, "translation.Cadence"),
	"averagespeed": i18n.T(ctx, "translation.Average_speed"),
}
	}}
	@templ.JSONScript("preferred-units", helpers.PreferredUnitsToJSON(pu))
	@templ.JSONScript("data", data)
	@templ.JSONScript("tz", helpers.Timezone(ctx))
	@templ.JSONScript("lang", helpers.Language(ctx))
	@templ.JSONScript("translations", translations)
	<script>
  var preferredUnits = JSON.parse(document.getElementById('preferred-units').textContent)
  var data = JSON.parse(document.getElementById('data').textContent)
  var tz = JSON.parse(document.getElementById('tz').textContent)
  var lang = JSON.parse(document.getElementById('lang').textContent)
  var translations = JSON.parse(document.getElementById('translations').textContent)

  var theme = 'light';
  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
    theme = 'dark';
  }

  var options = {
    theme: { mode: theme },
    chart: {
      height: 400,
      animations: { enabled: false },
      toolbar: { show: false },
    },
    legend: {
      position: 'top',
      formatter: (seriesName, opts)=>{
        if(opts.seriesIndex>3) return '';
        return seriesName;
      },
      markers: { size: [12,12,12,12,0] }
    },
    tooltip: {
      x: { format: 'HH:mm', },
      y: [
        {
          formatter: function (val, opts) {
          var p = data[opts.dataPointIndex]
          var el = document.createElement('div');
          el.setAttribute("data-lat", p.Item.firstPoint.lat);
          el.setAttribute("data-lng", p.Item.firstPoint.lng);
          el.setAttribute("data-title", p.Label);

          set_marker(el)
          return val + " " + preferredUnits.speed;
          }
        },
        { formatter: function (val, opts) { return val + " " + preferredUnits.elevation; } },
        { formatter: function (val, opts) { return val + " " + preferredUnits.heartRate; } },
        { formatter: function (val, opts) { return val + " " + preferredUnits.cadence; } },
        { formatter: function (val, opts) { return val + " " + preferredUnits.distance; } },
        { formatter: function (val, opts) { return formatDuration(val); } },
      ],
    },
    stroke: {
      width: 2,
      curve: 'smooth',
    },
    markers: {
      size: 1,
    },
    series: [
      {
        name: translations.averagespeed,
        type: "line",
        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.localAverageSpeed })),
      },
      {
        name: translations.elevation,
        type: "area",
        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.localElevation })),
      },
      {
        name: translations.heartrate,
        type: "line",
        display: false,
        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.localHeartRate })),
      },
      {
        name: translations.cadence,
        type: "line",
        display: false,
        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.localCadence })),
      },
      {
        name: translations.distance,
        type: "none",
        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.localTotalDistance })),
      },
      {
        name: translations.duration,
        type: "none",
        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.totalDurationSeconds })),
      },
    ],
    xaxis: {
      labels: {
        formatter: (val, ts, opts) => {
          return new Date(ts).toLocaleTimeString(lang, { timeZone: tz })
        },
      },
      type: "datetime",
    },
    yaxis: [
      {
        min: 0,
        labels: {
          formatter: (val) => {
            return val + " " + preferredUnits.speed;
          },
        },
      },
      {
        labels: {
          formatter: (val) => {
            return val + " " + preferredUnits.elevation;
          },
        },
        opposite: true,
      },
      {
        labels: {
          formatter: (val) => {
            return val + " " + preferredUnits.heartRate;
          },
        },
      },
      {
        labels: {
          formatter: (val) => {
            return val + " " + preferredUnits.cadence;
          },
        },
      },
      { show: false },
    ],
  };

  var chart = new ApexCharts(document.querySelector("#chart"), options);
  chart.render();
  chart.hideSeries(translations.heartrate);
  chart.hideSeries(translations.cadence);
</script>
}
