// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package workouts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
)

type item struct {
	Item  database.BreakdownItem
	Label string
}

func ShowStats(stats database.WorkoutBreakdown) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"chart\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		pu := helpers.CurrentUser(ctx).PreferredUnits()

		data := []item{}
		for _, i := range stats.Items {
			i.Localize(pu)

			data = append(data, item{
				Item:  i,
				Label: PointTitle(ctx, pu, i.FirstPoint),
			})
		}

		translations := map[string]string{
			"distance":     i18n.T(ctx, "translation.Distance"),
			"duration":     i18n.T(ctx, "translation.Duration"),
			"calories":     i18n.T(ctx, "translation.Calories"),
			"heartrate":    i18n.T(ctx, "translation.Heart_rate"),
			"speed":        i18n.T(ctx, "translation.Speed"),
			"elevation":    i18n.T(ctx, "translation.Elevation"),
			"cadence":      i18n.T(ctx, "translation.Cadence"),
			"averagespeed": i18n.T(ctx, "translation.Average_speed"),
		}
		templ_7745c5c3_Err = templ.JSONScript("preferred-units", helpers.PreferredUnitsToJSON(pu)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("data", data).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("tz", helpers.Timezone(ctx)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("lang", helpers.Language(ctx)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("translations", translations).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script>\n  var preferredUnits = JSON.parse(document.getElementById('preferred-units').textContent)\n  var data = JSON.parse(document.getElementById('data').textContent)\n  var tz = JSON.parse(document.getElementById('tz').textContent)\n  var lang = JSON.parse(document.getElementById('lang').textContent)\n  var translations = JSON.parse(document.getElementById('translations').textContent)\n\n  var theme = 'light';\n  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n    theme = 'dark';\n  }\n\n  var options = {\n    theme: { mode: theme },\n    chart: {\n      height: 400,\n      animations: { enabled: false },\n      toolbar: { show: false },\n    },\n    legend: {\n      position: 'top',\n      formatter: (seriesName, opts)=>{\n        if(opts.seriesIndex>3) return '';\n        return seriesName;\n      },\n      markers: { size: [12,12,12,12,0] }\n    },\n    tooltip: {\n      x: { format: 'HH:mm', },\n      y: [\n        {\n          formatter: function (val, opts) {\n          var p = data[opts.dataPointIndex]\n          var el = document.createElement('div');\n          el.setAttribute(\"data-lat\", p.Item.firstPoint.lat);\n          el.setAttribute(\"data-lng\", p.Item.firstPoint.lng);\n          el.setAttribute(\"data-title\", p.Label);\n\n          set_marker(el)\n          return val + \" \" + preferredUnits.speed;\n          }\n        },\n        { formatter: function (val, opts) { return val + \" \" + preferredUnits.elevation; } },\n        { formatter: function (val, opts) { return val + \" \" + preferredUnits.heartRate; } },\n        { formatter: function (val, opts) { return val + \" \" + preferredUnits.cadence; } },\n        { formatter: function (val, opts) { return val + \" \" + preferredUnits.distance; } },\n        { formatter: function (val, opts) { return formatDuration(val); } },\n      ],\n    },\n    stroke: {\n      width: 2,\n      curve: 'smooth',\n    },\n    markers: {\n      size: 1,\n    },\n    series: [\n      {\n        name: translations.averagespeed,\n        type: \"line\",\n        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.localAverageSpeed })),\n      },\n      {\n        name: translations.elevation,\n        type: \"area\",\n        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.localElevation })),\n      },\n      {\n        name: translations.heartrate,\n        type: \"line\",\n        display: false,\n        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.localHeartRate })),\n      },\n      {\n        name: translations.cadence,\n        type: \"line\",\n        display: false,\n        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.localCadence })),\n      },\n      {\n        name: translations.distance,\n        type: \"none\",\n        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.localTotalDistance })),\n      },\n      {\n        name: translations.duration,\n        type: \"none\",\n        data: data.map(e => ({ x: e.Item.firstPoint.time, y: e.Item.totalDurationSeconds })),\n      },\n    ],\n    xaxis: {\n      labels: {\n        formatter: (val, ts, opts) => {\n          return new Date(ts).toLocaleTimeString(lang, { timeZone: tz })\n        },\n      },\n      type: \"datetime\",\n    },\n    yaxis: [\n      {\n        min: 0,\n        labels: {\n          formatter: (val) => {\n            return val + \" \" + preferredUnits.speed;\n          },\n        },\n      },\n      {\n        labels: {\n          formatter: (val) => {\n            return val + \" \" + preferredUnits.elevation;\n          },\n        },\n        opposite: true,\n      },\n      {\n        labels: {\n          formatter: (val) => {\n            return val + \" \" + preferredUnits.heartRate;\n          },\n        },\n      },\n      {\n        labels: {\n          formatter: (val) => {\n            return val + \" \" + preferredUnits.cadence;\n          },\n        },\n      },\n      { show: false },\n    ],\n  };\n\n  var chart = new ApexCharts(document.querySelector(\"#chart\"), options);\n  chart.render();\n  chart.hideSeries(translations.heartrate);\n  chart.hideSeries(translations.cadence);\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
