package workouts

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
	"github.com/jovandeginste/workout-tracker/v2/views/partials"
)

templ EventTitle(w *database.Workout, preferredUnits *database.UserPreferredUnits) {
	@helpers.IconFor(w.Type.String())
	switch  {
		case w.Type.IsDistance():
			{ helpers.HumanDistance(ctx, w.Distance()) } { preferredUnits.Distance() }
		case w.Type.IsWeight():
			{ helpers.HumanWeight(ctx, w.Weight()) } { preferredUnits.Weight() }
		case w.Type.IsRepetition():
			{ helpers.A2S(w.Repetitions()) }
		default:
			{ w.Name }
	}
}

templ Name(w *database.Workout, maxLength int) {
	if w.Name == "" {
		<i>(no name)</i>
	} else if maxLength > 0 && len(w.Name) > maxLength {
		<abbr title={ w.Name }>{ fmt.Sprintf("%.*s", maxLength, w.Name) }...</abbr>
	} else {
		{ w.Name }
	}
}

templ Details(w *database.Workout) {
	{{ currentUser := helpers.CurrentUser(ctx) }}
	<table>
		<tbody>
			<tr>
				<td>
					@helpers.IconFor("name")
				</td>
				<td class="max-w-[0px] overflow-hidden whitespace-nowrap text-ellipsis">
					<a href={ templ.SafeURL(helpers.RouteFor(ctx, "workout-show", w.ID)) }>
						@Name(w, 0)
					</a>
				</td>
			</tr>
			<tr>
				<td>
					@helpers.IconFor("date")
				</td>
				<td>
					@partials.SnippetDate(w.Date)
				</td>
			</tr>
			<tr>
				<td>
					@helpers.IconFor("workout")
				</td>
				<td>
					<span>
						@helpers.IconFor(w.Type.String())
						if w.HasCustomType() {
							<i>{ w.CustomType }</i>
						} else {
							{ i18n.T(ctx, w.Type.StringT()) }
						}
					</span>
				</td>
			</tr>
			if w.Type.IsRepetition() {
				<tr>
					<td>
						@helpers.IconFor("repetitions")
					</td>
					<td class="whitespace-nowrap font-mono">{ helpers.A2S(w.TotalRepetitions()) }</td>
				</tr>
				<tr>
					<td>
						@helpers.IconFor("tempo")
					</td>
					<td class="whitespace-nowrap font-mono">
						{ helpers.A2S(w.RepetitionFrequencyPerMinute()) }
					</td>
				</tr>
			}
			if w.Type.IsWeight() {
				<tr>
					<td>
						@helpers.IconFor("weight")
					</td>
					<td class="whitespace-nowrap font-mono">
						{ helpers.HumanWeight(ctx, w.Weight()) }
						{ currentUser.PreferredUnits().Weight() }
					</td>
				</tr>
			}
			if w.Type.IsDuration() {
				<tr>
					<td>
						@helpers.IconFor("duration")
					</td>
					<td class="whitespace-nowrap font-mono">
						@showLocked(w)
						{ helpers.HumanDuration (w.TotalDuration()) }
					</td>
				</tr>
			}
			if w.Type.IsDistance() {
				<tr>
					<td>
						@helpers.IconFor("distance")
					</td>
					<td class="whitespace-nowrap font-mono">
						@showLocked(w)
						{ helpers.HumanDistance (ctx, w.TotalDistance()) }
						{ currentUser.PreferredUnits().Distance() }
					</td>
				</tr>
			}
			if w.Type.IsDistance() && w.Type.IsDuration() {
				<tr>
					<td>
						@helpers.IconFor("speed")
					</td>
					<td class="whitespace-nowrap font-mono">
						{ helpers.HumanSpeed (ctx, w.AverageSpeed() ) } { currentUser.PreferredUnits().Speed() }
					</td>
				</tr>
			}
		</tbody>
	</table>
}

templ FullWorkoutDetails(w *database.Workout) {
	{{ currentUser := helpers.CurrentUser(ctx) }}
	<table>
		<tbody>
			if w.Type.IsRepetition() {
				<tr>
					<td>
						@helpers.IconFor("repetitions")
					</td>
					<th>{ i18n.T(ctx, "translation.Repetitions") }</th>
					<td class="whitespace-nowrap font-mono">{ helpers.A2S(w.TotalRepetitions()) }</td>
				</tr>
				<tr>
					<td>
						@helpers.IconFor("tempo")
					</td>
					<th>{ i18n.T(ctx, "translation.Average_per_minute") }</th>
					<td class="whitespace-nowrap font-mono">
						{ helpers.A2S(w.RepetitionFrequencyPerMinute()) }
					</td>
				</tr>
			}
			if w.Type.IsWeight() {
				<tr>
					<td>
						@helpers.IconFor("weight")
					</td>
					<th>{ i18n.T(ctx, "translation.Weight") }</th>
					<td class="whitespace-nowrap font-mono">
						{ helpers.HumanWeight(ctx, w.Weight()) }
						{ currentUser.PreferredUnits().Weight() }
					</td>
				</tr>
			}
			if w.Type.IsDuration() {
				<tr>
					<td>
						@helpers.IconFor("pause")
					</td>
					<th>{ i18n.T(ctx, "translation.Time_paused") }</th>
					<td class="whitespace-nowrap font-mono">
						{ helpers.HumanDuration (w.PauseDuration() ) }
					</td>
				</tr>
			}
			if w.Type.IsDistance() &&  w.Type.IsDuration() {
				<tr>
					<td>
						@helpers.IconFor("speed")
					</td>
					<th>{ i18n.T(ctx, "translation.Average_speed") }</th>
					<td class="whitespace-nowrap font-mono">
						{ helpers.HumanSpeed (ctx,w.AverageSpeed()) } { currentUser.PreferredUnits().Speed() }
					</td>
				</tr>
				if w.PauseDuration() != 0 {
					<tr>
						<td>
							@helpers.IconFor("speed")
						</td>
						<th>{ i18n.T(ctx, "translation.Average_speed_no_pause") }</th>
						<td class="whitespace-nowrap font-mono">
							{ helpers.HumanSpeed (ctx,w.AverageSpeedNoPause() ) }
							{ currentUser.PreferredUnits().Speed() }
						</td>
					</tr>
				}
				<tr>
					<td>
						@helpers.IconFor("tempo")
					</td>
					<th>{ i18n.T(ctx, "translation.Average_tempo") }</th>
					<td class="whitespace-nowrap font-mono">
						{ helpers.HumanTempo (ctx,w.AverageSpeed() ) } { currentUser.PreferredUnits().Tempo() }
					</td>
				</tr>
				if  w.PauseDuration()!= 0 {
					<tr>
						<td>
							@helpers.IconFor("tempo")
						</td>
						<th>{ i18n.T(ctx, "translation.Average_tempo_no_pause") }</th>
						<td class="whitespace-nowrap font-mono">
							{ helpers.HumanTempo (ctx,w.AverageSpeedNoPause()) }
							{ currentUser.PreferredUnits().Tempo() }
						</td>
					</tr>
				}
				<tr>
					<td>
						@helpers.IconFor("max-speed")
					</td>
					<th>{ i18n.T(ctx, "translation.Max_speed") }</th>
					<td class="whitespace-nowrap font-mono">
						{ helpers.HumanSpeed (ctx,w.MaxSpeed()) } { currentUser.PreferredUnits().Speed() }
					</td>
				</tr>
				if w.HasCadence() {
					<tr>
						<td>
							@helpers.IconFor("cadence")
						</td>
						<th>{ i18n.T(ctx, "translation.Average_cadence") }</th>
						<td class="whitespace-nowrap font-mono">
							{ helpers.HumanCadence (w.AverageCadence()) }
							{ currentUser.PreferredUnits().Cadence() }
						</td>
					</tr>
					<tr>
						<td>
							@helpers.IconFor("cadence")
						</td>
						<th>{ i18n.T(ctx, "translation.Max_cadence") }</th>
						<td class="whitespace-nowrap font-mono">
							{ helpers.HumanCadence (w.MaxCadence()) }
							{ currentUser.PreferredUnits().Cadence() }
						</td>
					</tr>
				}
			}
			if w.Type.IsLocation() {
				if w.HasElevation() {
					<tr>
						<td>
							@helpers.IconFor("elevation")
						</td>
						<th>{ i18n.T(ctx, "translation.Min_elevation") }</th>
						<td class="whitespace-nowrap font-mono">
							{ helpers.HumanElevation (ctx,w.MinElevation() ) } { currentUser.PreferredUnits().Elevation() }
						</td>
					</tr>
					<tr>
						<td>
							@helpers.IconFor("elevation")
						</td>
						<th>{ i18n.T(ctx, "translation.Max_elevation") }</th>
						<td class="whitespace-nowrap font-mono">
							{ helpers.HumanElevation (ctx,w.MaxElevation() ) } { currentUser.PreferredUnits().Elevation() }
						</td>
					</tr>
				}
			}
			<tr>
				<td>
					@helpers.IconFor("equipment")
				</td>
				<td>{ i18n.T(ctx, "menu.Equipment") }</td>
				<td>
					if len(w.Equipment) > 0 {
						for _, e := range w.Equipment {
							<a href={ templ.SafeURL(helpers.RouteFor(ctx, "equipment-show", e.ID)) }>{ e.Name }</a>
						}
					} else {
						<i>{ i18n.T(ctx, "translation.no_equipment") }</i>
					}
				</td>
			</tr>
			if w.HasExtraMetrics() {
				<tr>
					<td>
						@helpers.IconFor("metrics")
					</td>
					<td>{ i18n.T(ctx, "translation.Extra_metrics") }</td>
					<td class="flex flex-wrap gap-1">
						if w.HasHeartRate() {
							<div title={ i18n.T(ctx, "translation.Heart_rate") }>
								@helpers.IconFor("heart-rate")
							</div>
						}
						if w.HasCadence() {
							<div title={ i18n.T(ctx, "translation.Cadence") }>
								@helpers.IconFor("cadence")
							</div>
						}
						if w.HasEnhancedSpeed() {
							<div title={ i18n.T(ctx, "translation.enhanced_speed") }>
								@helpers.IconFor("speed")
							</div>
						}
						if w.HasTemperature() {
							<div title={ i18n.T(ctx, "translation.temperature") }>
								@helpers.IconFor("temperature")
							</div>
						}
						if w.HasHeading() {
							<div title={ i18n.T(ctx, "translation.Heading") }>
								@helpers.IconFor("heading")
							</div>
						}
						if w.HasAccuracy() {
							<div title={ i18n.T(ctx, "translation.Accuracy") }>
								@helpers.IconFor("accuracy")
							</div>
						}
					</td>
				</tr>
			}
		</tbody>
	</table>
}

templ showLocked(w *database.Workout) {
	if w.Locked {
		<span class="dangerous" title={ i18n.T(ctx, "translation.WorkoutAttributeLocked") }>
			@helpers.IconFor("locked")
		</span>
	}
}
