package workouts

import (
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
	"github.com/jovandeginste/workout-tracker/v2/views/partials"
)

templ List(workouts []*database.Workout, filters *database.WorkoutFilters) {
	@partials.Page(partials.NewPageOptions()) {
		<div class="items-baseline flex flex-wrap">
			<h2 class="grow justify-start">
				@helpers.IconFor(`workout`)
				{ i18n.T(ctx, "menu.Workouts") } ({ helpers.A2S(len(workouts)) })
			</h2>
			<div class="justify-end mr-2">
				<a href={ templ.SafeURL(helpers.RouteFor(ctx, "workout-add")) }>
					@helpers.IconFor("add")
					{ i18n.T(ctx, "translation.Add_workout") }
				</a>
			</div>
		</div>
		<details class="inner-form" open?={ filters.Active }>
			<summary class="cursor-pointer">{ i18n.T(ctx, "translation.Filter_workouts") }</summary>
			<form id="filters" method="get" action={ templ.SafeURL(helpers.RouteFor(ctx, "workouts")) }>
				<input type="hidden" id="active" name="active" value="true"/>
				<label for="type">{ i18n.T(ctx, "translation.Type") }</label>
				<select id="type" name="type">
					<option value="">{ i18n.T(ctx, "translation.All") }</option>
					for _, wt := range helpers.WorkoutTypes() {
						<option
							value={ wt.String() }
							selected?={ wt.String() == filters.Type.String() }
						>
							{ i18n.T(ctx, wt.StringT()) }
						</option>
					}
				</select>
				<label for="since">{ i18n.T(ctx, "translation.Last") }</label>
				<select id="since" name="since">
					for _, fo := range helpers.FilterOptions() {
						<option value={ fo.Key } selected?={ fo.Key ==  filters.Since }>
							{ i18n.T(ctx, fo.Translation) }
						</option>
					}
				</select>
				<label for="order_by">{ i18n.T(ctx, "translation.Sort_by") }</label>
				<select id="order_by" name="order_by">
					for _, o := range helpers.OrderByOptions() {
						<option value={ o.Key } selected?={ o.Key ==  filters.OrderBy }>
							{ i18n.T(ctx, o.Translation) }
						</option>
					}
				</select>
				<select id="order_dir" name="order_dir">
					for _, o := range helpers.OrderDirOptions() {
						<option value={ o.Key } selected?={ o.Key == filters.OrderDir }>
							{ i18n.T(ctx, o.Translation) }
						</option>
					}
				</select>
				<button type="submit">{ i18n.T(ctx, "translation.Filter") }</button>
			</form>
		</details>
		<table class="workout-info">
			<thead>
				<tr>
					<th></th>
					<th>{ i18n.T(ctx, "translation.Name") }</th>
					<th>{ i18n.T(ctx, "translation.Date") }</th>
					<th class="hidden lg:table-cell">{ i18n.T(ctx, "translation.Details") }</th>
					<th class="hidden sm:table-cell"></th>
				</tr>
			</thead>
			<tbody>
				for _, w := range workouts {
					<tr>
						<td class="text-center">
							<div title={ i18n.T(ctx, w.Type.StringT()) }>
								@helpers.IconFor(w.Type.String())
								if w.HasCustomType() {
									<i>{ w.CustomType }</i>
								} else {
									{ i18n.T(ctx, w.Type.StringT()) }
								}
							</div>
						</td>
						<td>
							<a href={ templ.SafeURL(helpers.RouteFor(ctx, "workout-show", w.ID)) }>
								@Name(w, 20)
							</a>
						</td>
						<td>
							@partials.SnippetDate(w.Date)
						</td>
						<th class="hidden lg:table-cell">
							@ListDetails(w)
						</th>
						<td class="hidden sm:table-cell">
							if w.Dirty {
								<span title={ i18n.T(ctx, "translation.refresh_in_progress") }>
									@helpers.IconFor("refresh")
								</span>
							}
							<span class="actions">
								@Actions(w)
							</span>
						</td>
					</tr>
				}
			</tbody>
		</table>
	}
}
