package workouts

import (
	"fmt"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
)

templ Form(w *database.Workout) {
	{{ currentUser := helpers.CurrentUser(ctx) }}
	{{ preferredUnits := currentUser.PreferredUnits() }}
	if w.HasCustomType() {
		<tr>
			<td><label for="custom_type">{ i18n.T(ctx, "translation.Type") }</label></td>
			<td>
				<input
					type="text"
					name="custom_type"
					id="custom_type"
					size="60"
					value={ w.CustomType }
					required
				/>
			</td>
		</tr>
	}
	<tr>
		<td><label for="name">{ i18n.T(ctx, "translation.Name") }</label></td>
		<td>
			<input
				type="text"
				name="name"
				id="name"
				size="60"
				value={ w.Name }
				required
			/>
		</td>
	</tr>
	<tr>
		<td><label for="date">{ i18n.T(ctx, "translation.Date") }</label></td>
		<td>
			<input
				type="datetime-local"
				name="date"
				id="date"
				value={ helpers.LocalDate(ctx, w.Date) }
				required
			/>
			<input
				type="hidden"
				name="timezone"
				id="timezone"
				value={ helpers.Timezone(ctx) }
				required
			/>
		</td>
	</tr>
	<tr>
		<td><label for="location">{ i18n.T(ctx, "translation.Location") }</label></td>
		<td>
			<input
				type="text"
				name="location"
				id="location"
				size="60"
				value={ w.FullAddress() }
				autocomplete="off"
				hx-trigger="load, input changed queue:last delay:300ms"
				hx-target="#addresses"
				hx-post={ helpers.RouteFor(ctx, "lookup-address") }
			/>
			<div id="addresses"></div>
		</td>
	</tr>
	if w.Type.IsDuration() {
		<tr>
			<td><label for="duration">{ i18n.T(ctx, "translation.Duration") }</label></td>
			<td>
				<input
					type="number"
					name="duration_hours"
					id="duration_hours"
					min="0"
					max="999"
					maxlength="3"
					value={ helpers.A2S(int(w.Duration().Hours())) }
					required
				/>:
				<input
					type="number"
					name="duration_minutes"
					id="duration_minutes"
					min="0"
					max="59"
					maxlength="2"
					value={ helpers.A2S(int(w.Duration().Minutes()) % 60) }
					required
				/>:
				<input
					type="number"
					name="duration_seconds"
					id="duration_seconds"
					min="0"
					max="59"
					maxlength="2"
					value={ helpers.A2S(int(w.Duration().Seconds()) % 60) }
					required
				/>
				(hhh:mm:ss)
			</td>
		</tr>
	}
	if w.Type.IsDistance() {
		<tr>
			<td><label for="distance">{ i18n.T(ctx, "translation.Distance") }</label></td>
			<td>
				<input
					type="text"
					name="distance"
					id="distance"
					value={ helpers.HumanDistance(ctx, w.Distance()) }
					required
				/>
				<span>{ preferredUnits.Distance() }</span>
			</td>
		</tr>
	}
	if w.Type.IsRepetition() {
		<tr>
			<td><label for="repetitions">{ i18n.T(ctx, "translation.Repetitions") }</label></td>
			<td>
				<input
					type="number"
					name="repetitions"
					id="repetitions"
					value={ helpers.A2S(w.Repetitions()) }
					required
				/>
			</td>
		</tr>
	}
	if w.Type.IsWeight() {
		<tr>
			<td><label for="weight">{ i18n.T(ctx, "translation.Weight") }</label></td>
			<td>
				<input
					type="text"
					name="weight"
					id="weight"
					value={ helpers.HumanWeight(ctx, w.Weight()) }
					required
				/>
				<span>{ preferredUnits.Weight() }</span>
			</td>
		</tr>
	}
	<tr>
		<td>
			<label for="notes">{ i18n.T(ctx, "translation.Notes") }</label>
		</td>
		<td>
			<textarea type="text" id="notes" name="notes" rows="10" cols="60">
				{ w.Notes }
			</textarea>
		</td>
	</tr>
	<tr>
		<td>
			<label for="equipment">{ i18n.T(ctx, "menu.Equipment") }</label>
		</td>
		<td>
			for _, e := range currentUser.Equipment {
				<label class="inline">
					<input
						class="hidden peer"
						type="checkbox"
						id={ fmt.Sprintf("equipment_%d", e.ID) }
						name="equipment"
						value={ helpers.A2S(e.ID) }
						checked?={ w.Uses(e) }
					/>
					<span id={ helpers.A2S(e.ID) } class="selectable-pill" for={ fmt.Sprintf("equipment_%d", e.ID) }>
						{ helpers.THas(ctx, e.Name) }
					</span>
				</label>
			}
		</td>
	</tr>
}
