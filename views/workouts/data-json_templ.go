// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.943
package workouts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"context"
	"github.com/invopop/ctxi18n/i18n"
	"github.com/jovandeginste/workout-tracker/v2/pkg/database"
	"github.com/jovandeginste/workout-tracker/v2/views/helpers"
	"github.com/spf13/cast"
)

type dataset struct {
	Label string
	Data  []any
}

func translationMap(ctx context.Context) map[string]string {
	return map[string]string{
		"distance":     i18n.T(ctx, "translation.Distance"),
		"duration":     i18n.T(ctx, "translation.Duration"),
		"calories":     i18n.T(ctx, "translation.Calories"),
		"heart-rate":   i18n.T(ctx, "translation.Heart_rate"),
		"temperature":  i18n.T(ctx, "translation.temperature"),
		"speed":        i18n.T(ctx, "translation.Speed"),
		"elevation":    i18n.T(ctx, "translation.Elevation"),
		"cadence":      i18n.T(ctx, "translation.Cadence"),
		"averagespeed": i18n.T(ctx, "translation.Average_speed"),
	}
}

func labelMap(ctx context.Context, w *database.Workout) map[string]*dataset {
	data := map[string]*dataset{
		"position": {Label: "", Data: []any{}},
		"time":     {Label: i18n.T(ctx, "translation.Time"), Data: []any{}},
		"distance": {Label: i18n.T(ctx, "translation.Distance"), Data: []any{}},
		"speed":    {Label: i18n.T(ctx, "translation.Speed"), Data: []any{}},
		"duration": {Label: i18n.T(ctx, "translation.Duration"), Data: []any{}},
	}

	translations := translationMap(ctx)

	for _, m := range w.Data.ExtraMetrics {
		data[m] = &dataset{Label: translations[m], Data: []any{}}
	}

	return data
}

func addDetails(ctx context.Context, data map[string]*dataset, w *database.Workout) {
	for _, p := range w.Details().Points {
		s := 0.0
		if ems, ok := p.ExtraMetrics["speed"]; ok && ems > 0 {
			s = ems
		} else {
			s = p.AverageSpeed()
		}

		data["position"].Data = append(data["position"].Data, []float64{p.Lat, p.Lng})
		data["time"].Data = append(data["time"].Data, p.Time)
		data["distance"].Data = append(data["distance"].Data, helpers.HumanDistance(ctx, p.TotalDistance))
		data["duration"].Data = append(data["duration"].Data, p.TotalDuration.Seconds())
		data["speed"].Data = append(data["speed"].Data, cast.ToFloat64(helpers.HumanSpeed(ctx, s)))

		for _, m := range w.Data.ExtraMetrics {
			if m == "speed" {
				continue
			}

			if v, ok := p.ExtraMetrics[m]; ok {
				data[m].Data = append(data[m].Data, v)
			} else {
				data[m].Data = append(data[m].Data, nil)
			}
		}
	}
}

func DataJson(w *database.Workout) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		pu := helpers.PreferredUnitsToJSON(helpers.CurrentUser(ctx).PreferredUnits())
		data := labelMap(ctx, w)
		addDetails(ctx, data, w)
		templ_7745c5c3_Err = templ.JSONScript("workout-preferred-units", pu).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("workout-data", data).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
